TT Maplotlib

>> CHAPTER ONE INTRODUCTION


>> CHAPTER TWO INSTALLING

>> CHAPTER THREE TUTORIALS

3.1 Introductory
3.1.1 Pyplot tutorial

import matplotlib.pyplot as plt
plt.plot([1,2,3,4])
plt.ylabel('some numbers')
plt.show()

You may be wondering

 plt. plot([1 , 2 , 3 , 4 ], [1 , 4 , 9 , 16 ])

.———————————

import matplotlib.pyplot as plt
plt.plot([1,2,3,4], [1,4,9,16], 'ro')
plt.axis([0, 6, 0, 20])
plt.show()

See the plot() documentation for a complete list of line styles and format strings.

import numpy as np
import matplotlib.pyplot as plt
# evenly sampled time at 200ms intervals
t = np.arange(0., 5., 0.2)
# red dashes, blue squares and green triangles
plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')
plt.show()


>> Controlling line properties

see matplotlib.lines.Line2D.

 plt. plot(x, y, linewidth=2.0 )

setter

 line, =  plt. plot(x, y, '-' )
line. set_antialiased(False ) # turn off antialising

.————————

 lines =  plt. plot(x1, y1, x2, y2)
# use keyword args
 plt. setp(lines, color='r' , linewidth=2.0 )

# or MATLAB style string value pairs
plt.setp(lines, 'color', 'r', 'linewidth', 2.0)


Here are the available Line2D properties.
Property Value Type
alpha float
animated [True | False]
antialiased or aa [True | False]
clip_box a matplotlib.transform.Bbox instance
clip_on [True | False]
clip_path a Path instance and a Transform instance, a Patch
color or c any matplotlib color
contains the hit testing function
dash_capstyle ['butt' | 'round' | 'projecting']
dash_joinstyle ['miter' | 'round' | 'bevel']
dashes sequence of on/o ink in points
data (np.array xdata, np.array ydata)
figure a matplotlib.figure.Figure instance
label any string
linestyle or ls [ '-' | '--' | '-.' | ':' | 'steps' | ...]
linewidth or lw float value in points
lod [True | False]
marker [ '+' | ',' | '.' | '1' | '2' | '3' | '4' ]
markeredgecolor or mec any matplotlib color
markeredgewidth or mew float value in points
markerfacecolor or mfc any matplotlib color
markersize or ms float
markevery [ None | integer | (startind, stride) ]
picker used in interactive line selection
pickradius the line pick selection radius
solid_capstyle ['butt' | 'round' | 'projecting']
solid_joinstyle ['miter' | 'round' | 'bevel']
transform a matplotlib.transforms.Transform instance
visible [True | False]
xdata np.array
ydata np.array
zorder any number

To get a list of settable line properties, call the setp() function with a line or lines as argument

In [69]: lines = plt.plot([1, 2, 3])
In [70]: plt.setp(lines)
alpha: float
animated: [True | False]
antialiased or aa: [True | False]

>> Working with multiple figures and axes

have to worry about this

import numpy as np
import matplotlib.pyplot as plt
def f(t):
   return np.exp(-t) * np.cos(2*np.pi*t)
t1 = np.arange(0.0, 5.0, 0.1)
t2 = np.arange(0.0, 5.0, 0.02)
plt.figure(1)
plt.subplot(211)
plt.plot(t1, f(t1), 'bo', t2, f(t2), 'k')
plt.subplot(212)
plt.plot(t2, np.cos(2*np.pi*t2), 'r--')
plt.show()


The subplot() command specifies numrows, numcols, fignum where fignum ranges from 1 to numrows*numcols.

import matplotlib.pyplot as plt
plt.figure(1) # the first figure
plt.subplot(211) # the first subplot in the first figure
plt.plot([1, 2, 3])
plt.subplot(212) # the second subplot in the first figure
plt.plot([4, 5, 6])
plt.figure(2) # a second figure
plt.plot([4, 5, 6]) # creates a subplot(111) by default
plt.figure(1) # figure 1 current; subplot(212) still current
 plt. subplot(211 ) # make subplot(211) in figure1 current
 plt. title('Easy as 1, 2, 3' ) # subplot 211 title

You can clear the current figure with clf() and the current axes with cla().

annoying

a thin stateful wrapper

>> Working with text

import numpy as np
import matplotlib.pyplot as plt
# Fixing random state for reproducibility
np.random.seed(19680801)
mu, sigma = 100, 15
x = mu + sigma * np.random.randn(10000)
# the histogram of the data
n, bins, patches = plt.hist(x, 50, normed=1, facecolor='g', alpha=0.75)
plt.xlabel('Smarts')
plt.ylabel('Probability')
plt.title('Histogram of IQ')
plt.text(60, .025, r'$\mu=100,\ \sigma=15$')
plt.axis([40, 160, 0, 0.03])
plt.grid(True)
plt.show()

>> Using mathematical expressions in text

 plt. title(r'$\sigma_i=15$' )

>> Annotating text

import numpy as np
import matplotlib.pyplot as plt
ax = plt.subplot(111)
t = np.arange(0.0, 5.0, 0.01)
s = np.cos(2*np.pi*t)
line, = plt.plot(t, s, lw=2)
plt.annotate('local max', xy=(2, 1), xytext=(3, 1.5),
arrowprops=dict(facecolor='black', shrink=0.05),
)
plt.ylim(-2,2)
plt.show()

>> Logarithmic and other nonlinear axes

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import NullFormatter # useful for `logit` scale
# Fixing random state for reproducibility
np.random.seed(19680801)
# make up some data in the interval ]0, 1[
y = np.random.normal(loc=0.5, scale=0.4, size=1000)
y = y[(y > 0) & (y < 1)]
y.sort()
x = np.arange(len(y))
# plot with various axes scales
plt.figure(1)
# linear
plt.subplot(221)
plt.plot(x, y)
plt.yscale('linear')
plt.title('linear')
plt.grid(True)
# log
plt.subplot(222)
plt.plot(x, y)
plt.yscale('log')
plt.title('log')
plt.grid(True)
# symmetric log
plt.subplot(223)
plt.plot(x, y - y.mean())
plt.yscale('symlog', linthreshy=0.01)
plt.title('symlog')
plt.grid(True)
# logit

 plt. subplot(224 )
plt. plot(x, y)
plt. yscale('logit' )
plt. title('logit' )
plt. grid(True )
# Format the minor tick labels of the y-axis into empty strings with
# `NullFormatter`, to avoid cumbering the axis with too many labels.
 plt. gca(). yaxis. set_minor_formatter(NullFormatter())
# Adjust the subplot layout, because the logit one may take more space
# than usual, due to y-tick labels like "1 - 10^{-3}"
 plt. subplots_adjust(top=0.92 , bottom=0.08 , left=0.10 , right=0.95 , hspace=0.25 ,
wspace=0.35 )
plt. show()

3.1.2 Image tutorial

>> Startup commands

>> Importing image data into Numpy arrays

Loading image data is supported by the Pillow library.

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np

img= mpimg. imread('stinkbug.png' )

>> Plotting numpy arrays as images

 imgplot =  plt. imshow(img)

>> Applying pseudocolor schemes to image plots

 lum_img =  img[:,:,0 ]

 plt. imshow(lum_img)

 plt. imshow(lum_img, cmap="hot" )

Note that you can also change colormaps on existing plot objects using the set_cmap() method:
In [10]: imgplot = plt.imshow(lum_img)
In [11]: imgplot.set_cmap('nipy_spectral')

>> Color scale reference

In [12]: imgplot = plt.imshow(lum_img)
In [13]: plt.colorbar()

>> Examining a specific data range

 plt. hist(lum_img. ravel(), bins=256 , range= (0.0 , 1.0 ), fc='k' , ec='k' )

 imgplot =  plt. imshow(lum_img, clim= (0.0 , 0.7 ))

>> Array Interpolation schemes





